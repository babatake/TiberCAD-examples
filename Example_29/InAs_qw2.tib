Variables {
    Vbias = 0.0
}


Device
{
  meshfile = InAs_qw.msh 


  # if run in parallel, only TB part will be parallelized
  Parallel
  {
    mpi_processes_per_mesh = 1
  }
 
  mesh_units = 1e-10
  dimension = 1

  x-growth-direction = (1, 0, 0)
  y-growth-direction = (0, 1, 0)
  z-growth-direction = (0, 0, 1)


  Region QW
  {
    material = InAs
  }

  Region barrier_left
  {
    material =  GaAs
  }

  Region barrier_right
  {
    material =  GaAs
  }

  Region device_left
  {
    material = GaAs
  }

  Region device_right
  {
    material = GaAs
  }

  # group together the regions for the quantum simulation
  Cluster Quantum
  {
    regions = (barrier_left, barrier_right, QW)
  }



  Atomistic tb
  {
    reference_region = barrier_left
    regions = Quantum
    passivation = yes
    print = (xyb, xyz, gen, tgn)
  }

}


Module driftdiffusion
{ 

  name = dd
  coupling = poisson
  enforce_local_charge_neutrality = true

  #save_state = true

# load existing driftdiffusion solution
#  load_state = dd.tsv

  plot = (Ec, Ev, eQFermi, hQFermi, ElField , eDensity, hDensity, Polarization)

  Solver linesearch
  {
    relative_tolerance = 1e-14  
    absolute_tolerance =  1e-50  
    step_tolerance = 1e-3
    max_step = 1.0 
    max_iterations = 30
  }

  Physics
  {

  }   

  Contact anode
  {
    type = ohmic
    voltage = 0.0
  }
      
      
  Contact cathode
  {
    type = ohmic
    voltage = $Vb[0.0]  
  }
} 


 
Module empirical_tb
{
  regions = Quantum
  name = tb
  atomistic_structure = tb
  Harrison_scaling = false
  potential_simulation = driftdiffusion

  dataset = Jancu

	  
  plot = (tbstates)

  Solver
  {
    # use built in lanczos algorithm
    solver = upt_lanczos
    guess_valence = -0.5
    guess_conduction = 0.0
    num_valence_eigenvalues = 4
    num_conduction_eigenvalues = 4
  }

}

Module efaschroedinger {
    name = efa_el
    regions = (QW)
    carriers = (electrons)
    number_of_eigenstates = 10
    plot = (EnergyLevels, WaveFunctions, ElectronDensity)

    Physics {
        particle = el
        model = single_band
    }

    Solver {
        solver = krylovshur
        guess = 0.1
        eigen_solver_tolerance = 1e-6
        fermi_level = from_dd
    }
}

Module efaschroedinger {
    name = efa_hl
    regions = (QW)
    carriers = (holes)
    number_of_eigenstates = 10
    plot = (EnergyLevels, WaveFunctions, HoleDensity)

    Physics {
        particle = hl
        model = single_band
        effective_mass = 0.5
    }

    Solver {
        solver = krylovshur
        guess = -0.1
        eigen_solver_tolerance = 1e-6
        fermi_level = from_dd
    }
}
Module opticskp {
    name = optics
    regions = (QW)
    plot = (optical_spectrum_k_0)

    initial_state_model = efa_el
    final_state_model = efa_hl
    initial_state_particle = el
    final_state_particle = hl

    Emin = 0.3
    Emax = 1.2
    dE = 0.002

    gain_model {
        polarization = TE
        temperature = 300
        broadening = 0.02
    }

    output_format = dat
}


Module opticstb
 {
        name = opticstb
        regions = Quantum
        
        plot = (optical_spectrum, matrix_elements, EigenStates)
        
        #put it to write output in 1D
        output_format=grace
        
        initial_state_model = tb
        final_state_model = tb
        #skip_solve = true
        
        Emin = 3
        Emax  = 6
        dE = 0.001
        broadening = 0.01

  k_integration
  {
     k_max = 1 
     write_k_mesh = true
     number_of_nodes = (2,2)
     quadrature_type = trapezoidal 
  }
}


Module efaschroedinger
{
  name = kp
  regions = (barrier_left, barrier_right, QW)

  poisson_model_name = driftdiffusion
  number_of_eigenstates = 4 

  plot = (EigenFunctions, EigenEnergy)

  Physics
  {
    model = 8x8
  }
}

Module sweep {
    name = sweep_bias
    variable = $Vbias
    solve = (dd, efa_el, efa_hl, optics)
    start = 0.0
    stop = 1.5
    steps = 50
    plot_data = true
    save_result = true
    save_result_dir = false
}

Simulation {
    temperature = 300
    verbose = 3
    solve = (sweep_bias)
    resultpath = output_gain_InAs
    output_format = vtk
}


