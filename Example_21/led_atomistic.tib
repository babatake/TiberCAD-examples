@define INCONT 0.25
@define BIAS 2.6

Device
{

  # when running in parallel (MPI), the default is to have one
  # single device and run solvers in parallel.
  # Here we want to run a certain number of devices, with or without 
  # parallel solvers.
  Parallel
  {
    mpi_processes_per_device = 1
    # let's do FEM calculations in serial
    mpi_processes_per_mesh   = 1
  }
  
  meshfile = led.msh
  mesh_units = 1e-9

  y-growth-direction = (1,0,-1,0)
  z-growth-direction = (-1,2,-1,0)
  x-growth-direction = (0,0,0,1)

  material = GaN

  # the non-intentional doping
  Doping
  {
    density = 1e16
    type =  donor
    level = 0.025
  }


  Region well1
  {
    material = InGaN
    x = INCONT
  }
 
  Region  qbarrierl
  {
  }
   
  Region  qbarriert
  {
  }
  

  Region  buffer
  {
    Doping
    {
      density = 1e19
      type =  donor
      level = 0.025
    }
  }

  Region  buffer_q
  {
    Doping
    {
      density = 1e19
      type =  donor
      level = 0.025
    }
  }

  Region  cap
  {
    Doping
    {
      density = 5e19
      type =  acceptor
      level = 0.17
    }
  }



  Region  p+
  {
    Doping
    {
      density = 1e20
      type =  acceptor
      level = 0.17
    }
  }




  Region  ebl
  {
    material = AlGaN
    x = 0.15
 
    # we put doping as traps n driftdiffusion block  
  }

  # for k-dot-p
  Cluster quantum
  {
    regions = (well1, qbarrierl, qbarriert, buffer_q)
  }

  # for tigh binding
  Cluster atomistic
  {
    regions = (well1, qbarrierl, qbarriert)
  }


  Atomistic tb
  {
    reference_region = qbarrierl
    regions = atomistic
    passivation = yes
    print = (xyz)

    random_alloy = true
    # we put an implicit seed here, for repeatability (and reload)
    # MPI_PROC is defined internally to the MPI process number
    random_generator_seed = MPI_PROC

    # supercell size should be at least 10 nm for real calculations
    #supercell_size_z = 100 
    #supercell_size_y = 100  
    supercell_size_z = 20 
    supercell_size_y = 20  

    # write out statistics of alloy
    alloy_statistics = true
    alloy_statistics {}

  }


}


Module elasticity 
{

  name = strain
  regions = all

  plot = (Strain, Stress)

  # deform mesh and atomistic structure
  # this is needed here since the structure is built with GaN
  # as reference crystal
  non_linear_strain = true


  Physics 
  {
    body_force lattice_mismatch 
    {
      reference_material = GaN
      y-growth-direction = (1,0,-1,0)
      z-growth-direction = (-1,2,-1,0)
      x-growth-direction = (0,0,0,1)
    }
       
  }

  Contact substrate  
  {type = clamp}

}


Module vff
{

 regions = quantum
 atomistic_structure = tb

 # fixes first layer of atoms on x-plane,
 # with a certain tolerance in x cordinate
 boundary_conditions = substrate
 substrate_plane = x
 substrate_tol = 0.519

 plot = StrainCells

 Physics
 {

   keating automatic
   {
     use_four_wz_parameters = true
   }
 }
}






Module  driftdiffusion
{ 
        
  name = dd
       
  # the default is rstf, which uses Ramo-Shockley type test functions and
  # integrates on the whole device to obtain the current. When using self-consistency
  # with quantum densities, this can lead to spurious errors. The 'compact' version
  # does not have this problem, as the test functions only extend near the contacts.
  current_integration_method = compact_rstf

  # we may solve only Poisson equation and fix the quasi Fermi
  # levels to constant values:
  #coupling = poisson
  #guess_el_qfermi = 0
  #guess_hl_qfermi = $bias

  # in this case we would do first the sweep only, and then reload the bias point of
  # interest
  load_state = "reference/dd_bias_"BIAS".tsv"
  # for the sweep, you would have to uncomment the following
  #save_state = true
     
  plot = (Ec, Ev, Eg, eQFermi, eDensity, eCurrentDensity, eMobility,
          hQFermi, hDensity, hCurrentDensity, hMobility,
          IonizedDonors, IonizedAcceptors, IonizedHoleTraps,
          NetRecombination, ElField, ElPotential, Polarization, ContactCurrents, IQE)

  Solver 
  {
    step_tolerance = 1e-3
  }

  Physics
  {

    # at the internal injection barriers, we would have very large
    # voltage losses. We model tunneling and defect assisted injection channels
    # with a fixed but non-vanishing background conductivity
    background_conductivity = 1e-6

    # here we use 100% of the theoretical polarization
    relax_polarization = 1.0

    conduction_band
    { 
      density_of_states quantum
      { 
        # where to get the quantum density from
        quantum_simulation = quantum_efa

        # here we add a classical density, to have smooth transition
        barrier_regions = (qbarrierl, qbarriert, buffer_q)
        #add_continuum_in_well = true

        # This is currently unavailable:
        # we use an embracing region to get a continuous transition from 
        # classical to quantum density
        #embracing
        #{
        #  embracing_length = 8e-9
        #  plot_embracing_regions = true
        #}

        # this is needed to know what to do in absence of quantum DOS
	classical_DOS bulk_kp 
        {
          strain_simulation = strain

          # the tight-binding parameters are for 0K, so we switch off the
          # temperature scaling of the band gap
          consider_temperature = false
        }

      }
    }


    valence_band
    { 
      density_of_states quantum
      { 
        # where to get the quantum density from
        quantum_simulation = quantum_efa

        # here we add a classical density. We exclude qbarrierl here,
        # because valence band offset is small
        barrier_regions = (qbarriert, buffer_q)
        #add_continuum_in_well = true

        # This is currently unavailable:
        # we use an embracing region to get a continuous transition from 
        # classical to quantum density
        #embracing
        #{
        #  embracing_length = 8e-9
        #  plot_embracing_regions = true
        #}

        # this is needed to know what to do in absence of quantum DOS
	classical_DOS bulk_kp 
        {
          strain_simulation = strain

          # the tight-binding parameters are for 0K, so we switch off the
          # temperature scaling of the band gap
          consider_temperature = false
        }

      }
    }


    polarization piezo
    {
      strain_simulation = strain 
    }

    polarization pyro { }


    trap acceptor
    {
      regions = ebl
      Et = 0.22
      reference = vb
      Nt = 4.5e19
      sigma_n = 1e-18
      sigma_p = 1e-16
      recombination_center = true 
      trap_assisted_tunneling
      {
        tunneling_mass = 0.14
      }
    }


    recombination srh
    {
      regions = (quantum)
      tau_n = 100e-9
      tau_p = 100e-9
    }

    # assume the doped regions have short SRH times
    recombination srh
    {
      regions = (-quantum)
      tau_n = 5e-9
      tau_p = 5e-9
    }


    recombination direct
    {
      C = 6e-12
      #optics_simulation = spectrum
    }

    recombination auger
    {
      Cn = 1e-31
      Cp = 1e-31
    }


  }


  Contact substrate {
    rec_velocity_p = 1e9
    area_factor = 0.01
  }

  Contact top {
    voltage = $bias
    rec_velocity_n = 1e9
    area_factor = 0.01
  }


}


Module  efaschroedinger
{
  
  name = quantum_efa
  regions = quantum

  plot = (ProbabilityDensity, EigenEnergy, QuantumDensity)

  poisson_simulation = dd
  strain_simulation  = strain 
 

  num_electron_states = 10
  num_hole_states = 18

  Solver
  {
    solver = krylovshur 
    ksp_type = bcgsl
    pc_type =  lu
  }

  Physics
  {
    model = 8x8
  }
  

}


Module opticskp
{

  name = spectrum 

  refractive_index = 2.3

  #compute_strengths = true

  regions = quantum

  plot = (optical_spectrum, OpticalPower, Recombination)
  output_format = grace


  initial_state_model = quantum_efa
  final_state_model =   quantum_efa


  Emin = 2.0
  Emax  = 3.5
  dE = 0.001
  broadening = 0.02

  # we want all polarizations, not one specific
  #polarization = (0, 0, 1)

  k_integration
  {
     k_max = 1 
     number_of_elements = (5,5)
     quadrature_type = gaussian 
     quadrature_order = third 

     refine_k_space = false 
     refine_fraction = 0.75
     relative_accuracy = 0.01 
  }

}

 
Module empirical_tb
{
  regions = atomistic
  name = tb

  atomistic_structure = tb
  Harrison_scaling = true     #set false when no strain

  potential_simulation = dd
 
  add_band_shifts = true

  jmol_output_format = cube

  #plot = (tbstates, ProbabilityDensity)

  Solver
  {

    #solver_type = gpu
    #solver = jd
    
    num_conduction_eigenvalues = 8
    num_valence_eigenvalues = 8

    long_tolerance = 1e-4

  }

#  Dispersion
#  {
#    k-path = G-X
#    number_of_nodes = 10
#  }

#  DOS
#  {
#    k_max = 0.05
#    number_of_nodes = (8, 8)	
#  }
}

 
Module opticstb
{
  name = opticstb
  regions = quantum

  plot = (optical_spectrum, matrix_elements, EigenStates)

  # put it to write output in 1D
  output_format=grace

  initial_state_model = tb
  final_state_model = tb
  #skip_solve = true

  Emin = 2
  Emax  = 4 #4.5
  dE = 0.001
  broadening = 0.01
  line_shape = gaussian

  k_integration
  {
    k_max = 1 
    number_of_elements = (1,1)
    quadrature_type = trapezoidal 

    refine_k_space = false 
  }

}








Module selfconsistent
{
  solve = (quantum_efa, dd)
  # we do not use relaxation, but a predictor-corrector scheme
  #relaxation_factor = 0.5
  max_iterations = 10
  absolute_tolerance = 1e-3
  relative_tolerance = 1e-8
  monitor = true
  #xmonitor = true
}



Module sweep
{
  name = sweep1
  solve = dd
  variable = $bias
  start = 0.0
  stop = 1.0
  steps = 20
  min_step = 1e-3
  plot_data = true
}

 
Module sweep
{
  name = sweep2
  solve = selfconsistent
  variable = $bias
  start = 1.0
  stop = 2.8
  steps = 18
  min_step = 1e-3
  plot_data = true
}



 

Simulation
{  
  # tight binding parameters are for 0K, so we put temperature near that for consistency
  temperature = 300
  # uncomment this for doing the bias sweep
  #solve = (strain, dd, sweep1, sweep2)   
  solve = (strain, vff, dd, tb, opticstb)   

  # we usually make a set of simulations, for a statistical ensemble of random structures
  # this can be done e.g. in parallel
  # MPI_DEV_KEY is an identifier for a single device process group
  resultpath = "output_tb_"MPI_DEV_KEY

  output_format = grace
}

